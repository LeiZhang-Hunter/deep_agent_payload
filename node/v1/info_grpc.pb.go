// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v4.25.1
// source: node/v1/info.proto

package v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	NodeCollectorService_Reg_FullMethodName    = "/NodeCollectorService/reg"
	NodeCollectorService_Update_FullMethodName = "/NodeCollectorService/update"
)

// NodeCollectorServiceClient is the client API for NodeCollectorService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type NodeCollectorServiceClient interface {
	// 注册node信息
	Reg(ctx context.Context, in *NodeInfo, opts ...grpc.CallOption) (*NodeRes, error)
	// 更新node信息
	Update(ctx context.Context, in *NodeUsage, opts ...grpc.CallOption) (*NodeRes, error)
}

type nodeCollectorServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewNodeCollectorServiceClient(cc grpc.ClientConnInterface) NodeCollectorServiceClient {
	return &nodeCollectorServiceClient{cc}
}

func (c *nodeCollectorServiceClient) Reg(ctx context.Context, in *NodeInfo, opts ...grpc.CallOption) (*NodeRes, error) {
	out := new(NodeRes)
	err := c.cc.Invoke(ctx, NodeCollectorService_Reg_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nodeCollectorServiceClient) Update(ctx context.Context, in *NodeUsage, opts ...grpc.CallOption) (*NodeRes, error) {
	out := new(NodeRes)
	err := c.cc.Invoke(ctx, NodeCollectorService_Update_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// NodeCollectorServiceServer is the server API for NodeCollectorService service.
// All implementations must embed UnimplementedNodeCollectorServiceServer
// for forward compatibility
type NodeCollectorServiceServer interface {
	// 注册node信息
	Reg(context.Context, *NodeInfo) (*NodeRes, error)
	// 更新node信息
	Update(context.Context, *NodeUsage) (*NodeRes, error)
	mustEmbedUnimplementedNodeCollectorServiceServer()
}

// UnimplementedNodeCollectorServiceServer must be embedded to have forward compatible implementations.
type UnimplementedNodeCollectorServiceServer struct {
}

func (UnimplementedNodeCollectorServiceServer) Reg(context.Context, *NodeInfo) (*NodeRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Reg not implemented")
}
func (UnimplementedNodeCollectorServiceServer) Update(context.Context, *NodeUsage) (*NodeRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Update not implemented")
}
func (UnimplementedNodeCollectorServiceServer) mustEmbedUnimplementedNodeCollectorServiceServer() {}

// UnsafeNodeCollectorServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to NodeCollectorServiceServer will
// result in compilation errors.
type UnsafeNodeCollectorServiceServer interface {
	mustEmbedUnimplementedNodeCollectorServiceServer()
}

func RegisterNodeCollectorServiceServer(s grpc.ServiceRegistrar, srv NodeCollectorServiceServer) {
	s.RegisterService(&NodeCollectorService_ServiceDesc, srv)
}

func _NodeCollectorService_Reg_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NodeInfo)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NodeCollectorServiceServer).Reg(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: NodeCollectorService_Reg_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NodeCollectorServiceServer).Reg(ctx, req.(*NodeInfo))
	}
	return interceptor(ctx, in, info, handler)
}

func _NodeCollectorService_Update_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NodeUsage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NodeCollectorServiceServer).Update(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: NodeCollectorService_Update_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NodeCollectorServiceServer).Update(ctx, req.(*NodeUsage))
	}
	return interceptor(ctx, in, info, handler)
}

// NodeCollectorService_ServiceDesc is the grpc.ServiceDesc for NodeCollectorService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var NodeCollectorService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "NodeCollectorService",
	HandlerType: (*NodeCollectorServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "reg",
			Handler:    _NodeCollectorService_Reg_Handler,
		},
		{
			MethodName: "update",
			Handler:    _NodeCollectorService_Update_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "node/v1/info.proto",
}
